#!/usr/bin/evn python3
# __*__ conding=utf-8 __*__
'''
'''
"""
    高级特性之切片：
"""
if __name__ == '__main__':
    # 取list L中的前三个元素
    L = ['Michael', 'Sarah', 'Tracy', 'Bob', 'Jack']
    print('笨方法取前3：', [L[0], L[1], L[2]])
    # 取前n个元素
    r = []
    n = 3
    for i in range(n):
        r.append(L[i])
    print('笨方法取前n：', r)
    # 高级办法使用切片取出前3个元素 语法[0:3]  ，切片操作不包含最后一个元素
    print('高级特性之切片：', L[0:3])  # 如果第一个索引是0  0可以省略
    print('高级特性之切片：', L[:3])  # 如果第一个索引是0  0可以省略
    print('高级特性之切片：', L[1:3])  # 从索引1开始取2个元素
    print('高级特性之切片：', L[-2:])  # 从倒数第二个开始截取到最后
    print('高级特性之切片：', L[-2:-1])  # 倒数第一个索引是-1
    L = list(range(100))
    # 三个参数时第三个参数是步长 ， 如下表示每隔2个取一个元素
    print(L[:10:2])
    print(L[::5])  # L[::] 表示取所有数 ，[::5] 表示每隔5个取一个元素

    # tuple 也可以使用切片，tuple也是list不同的是tuple不可变，使用切片操作的结果还是tuple
    print((0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)[:3])

    # 字符串 也可以使用切片，字符串也可以看成是一个list，每个元素就是一个字符，操作结果仍然是字符串
    '''
        在很多编程语言中，针对字符串提供了很多各种截取函数（例如，substring），
        其实目的就是对字符串切片。Python没有针对字符串的截取函数，只需要切片一个操作就可以完成，非常简单。
    '''
    print('ABCDEFG'[:3])

    '''
        小结
        有了切片操作，很多地方循环就不再需要了。Python的切片非常灵活，一行代码就可以实现很多行循环才能完成的操作。
    '''
